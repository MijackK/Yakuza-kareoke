{"version":3,"file":"reset.bundle.js","mappings":"mBAAA,MCGM,UAAEA,GDHO,CACbC,MAAO,EACPC,kBAAmB,GACnBC,iBAAkB,GAClBC,WAAY,GACZC,aAAc,GACdC,UAAW,EACXN,UAAW,CACTO,YAAa,wBACbC,WAAY,qCCJDC,eAAe,GAAW,IAAEC,EAAG,QAAEC,EAAO,QAAEC,EAAU,CAAC,IAClE,MAAMC,EAAW,CAAC,YAAa,aAAaC,SAASC,OAAOF,SAASG,UACjEhB,EAAUO,YACVP,EAAUQ,WACRS,QAAiBC,MAAM,GAAGL,KAAYH,IAAO,CACjDS,KAAM,OACNC,YAAa,UACbR,QAAS,CACPS,WAAYC,eAAeC,QAAQ,gBAChCX,MAEFD,IAGL,IAAoB,IAAhBM,EAASO,GAAc,CACzB,MAAMC,QAAgBR,EAASS,OAC/B,MAAM,IAAIC,MCnBC,SAAsBC,GACnC,MAAMC,EAAYC,SAASC,cAAc,OAKzC,OAJAF,EAAUG,UAAYJ,EAEpBC,EAAUI,cAAc,MAAMC,aAC9B,kCAEJ,CDYoBC,CAAaV,GAC/B,CAKA,OAHIR,EAASmB,OAGNnB,CACT,CEzBA,MACMoB,EADS,IAAIC,gBAAgBvB,OAAOF,SAAS0B,QAC9BC,IAAI,SAEnBC,EAAYX,SAASG,cAAc,mBACnCS,EAAaZ,SAASG,cAAc,gBACtCI,IACFI,EAAUE,MAAMC,QAAU,OAC1BF,EAAWC,MAAMC,QAAU,QAE7BC,QAAQC,IAAIL,GAEZA,EAAUM,iBAAiB,UAAWC,IACpCA,EAAEC,iBACF,MAAMC,EAAW,IAAIC,SAASV,GACxBW,EAAeX,EAAUR,cAAc,UAC7CmB,EAAaC,UAAW,ECwFnB5C,eAA8B6C,GACnC,MAAM3C,EAAU,CACd4C,KAAMD,EACNE,OAAQ,QAGJvC,QAAiB,EAAW,CAChCP,IAAK,0BACLC,YAIF,aADmBM,EAASS,MAE9B,CDpGE+B,CAAeP,GACZQ,MAAMC,IACLlB,EAAUT,UAAY,WAAW2B,aACjCC,YAAW,KACT7C,OAAOF,SAASgD,SAAW,EAAE,GAC5B,IAAK,IAETC,OAAOC,IACNlB,QAAQC,IAAIiB,GACZtB,EAAUR,cAAc,KAAKU,MAAMC,QAAU,OAAO,IAErDoB,SAAQ,KACPZ,EAAaC,UAAW,CAAK,GAC7B,IAGNX,EAAWK,iBAAiB,UAAWC,IACrCA,EAAEC,iBACF,MAAMG,EAAeV,EAAWT,cAAc,UACxCiB,EAAW,IAAIC,SAAST,GAC9BQ,EAASe,IAAI,QAAS5B,GACtB,MAAM6B,EAAexB,EAAWT,cAAc,MCiFzCxB,eAA+B6C,GACpC,MAAM3C,EAAU,CACd4C,KAAMD,EACNE,OAAQ,QAGJvC,QAAiB,EAAW,CAChCP,IAAK,wBACLC,YAIF,aADmBM,EAASS,MAE9B,ED7FEyC,CAAgBjB,GACbQ,MAAMC,IACLjB,EAAWV,UAAY,WAAW2B,aAClCC,YAAW,KACT7C,OAAOF,SAASgD,SAAW,EAAE,GAC5B,IAAK,IAETC,OAAOC,IACNlB,QAAQC,IAAIiB,GACZG,EAAavB,MAAMC,QAAU,OAAO,IAErCoB,SAAQ,KACPZ,EAAaC,UAAW,CAAK,GAC7B,G","sources":["webpack://yakuza-kareoke/./src/config.js","webpack://yakuza-kareoke/./src/api/main.js","webpack://yakuza-kareoke/./src/utility.js/responseText.js","webpack://yakuza-kareoke/./src/verify/password-reset.js","webpack://yakuza-kareoke/./src/api/authentication.js"],"sourcesContent":["const config = {\r\n  dealy: 3,\r\n  timingWindowEarly: 0.2,\r\n  timingWindowLate: 0.1,\r\n  pointWidth: 10,\r\n  pointSpacing: 10,\r\n  startTime: 3,\r\n  apiDomain: {\r\n    development: \"http://localhost:5000\",\r\n    production: \"https://kareokeapi.onrender.com/\",\r\n  },\r\n  // for fetch requests\r\n};\r\n\r\nexport default config;\r\n","import config from \"../config\";\r\nimport responseText from \"../utility.js/responseText\";\r\n\r\nconst { apiDomain } = config;\r\n\r\nexport default async function apiRequest({ url, options, headers = {} }) {\r\n  const location = [\"localhost\", \"127.0.0.1\"].includes(window.location.hostname)\r\n    ? apiDomain.development\r\n    : apiDomain.production;\r\n  const response = await fetch(`${location}/${url}`, {\r\n    mode: \"cors\",\r\n    credentials: \"include\",\r\n    headers: {\r\n      CSRF_TOKEN: sessionStorage.getItem(\"csrfToken\"),\r\n      ...headers,\r\n    },\r\n    ...options,\r\n  });\r\n\r\n  if (response.ok === false) {\r\n    const message = await response.text();\r\n    throw new Error(responseText(message));\r\n  }\r\n\r\n  if (response.status === 401) {\r\n    // delete session data and storage, and logout from front end\r\n  }\r\n  return response;\r\n}\r\n","// gets the response text from an http error\r\n\r\nexport default function responseText(html) {\r\n  const container = document.createElement(\"div\");\r\n  container.innerHTML = html;\r\n  const text =\r\n    container.querySelector(\"p\")?.textContent ||\r\n    \"error could not compelte request\";\r\n  return text;\r\n}\r\n","import \"../general.css\";\r\nimport { forgotPassword, recoverPassword } from \"../api/authentication\";\r\n\r\nconst params = new URLSearchParams(window.location.search);\r\nconst token = params.get(\"token\");\r\n\r\nconst resetForm = document.querySelector(\"#password-reset\");\r\nconst changeForm = document.querySelector(\"#change-form\");\r\nif (token) {\r\n  resetForm.style.display = \"none\";\r\n  changeForm.style.display = \"flex\";\r\n}\r\nconsole.log(resetForm);\r\n\r\nresetForm.addEventListener(\"submit\", (e) => {\r\n  e.preventDefault();\r\n  const formData = new FormData(resetForm);\r\n  const submitButton = resetForm.querySelector(\"button\");\r\n  submitButton.disabled = true;\r\n  forgotPassword(formData)\r\n    .then((res) => {\r\n      resetForm.innerHTML = `<label> ${res} </label>`;\r\n      setTimeout(() => {\r\n        window.location.pathname = \"\";\r\n      }, 1000);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      resetForm.querySelector(\"p\").style.display = \"block\";\r\n    })\r\n    .finally(() => {\r\n      submitButton.disabled = false;\r\n    });\r\n});\r\n\r\nchangeForm.addEventListener(\"submit\", (e) => {\r\n  e.preventDefault();\r\n  const submitButton = changeForm.querySelector(\"button\");\r\n  const formData = new FormData(changeForm);\r\n  formData.set(\"token\", token);\r\n  const errorMessage = changeForm.querySelector(\"p\");\r\n  recoverPassword(formData)\r\n    .then((res) => {\r\n      changeForm.innerHTML = `<label> ${res} </label>`;\r\n      setTimeout(() => {\r\n        window.location.pathname = \"\";\r\n      }, 1000);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      errorMessage.style.display = \"block\";\r\n    })\r\n    .finally(() => {\r\n      submitButton.disabled = false;\r\n    });\r\n});\r\n","import apiRequest from \"./main\";\r\n\r\nexport async function login({ email, password }) {\r\n  const options = {\r\n    body: JSON.stringify({ email, password }),\r\n    method: \"post\",\r\n  };\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n\r\n  const response = await apiRequest({ url: \"auth/login\", options, headers });\r\n\r\n  const data = await response.json();\r\n\r\n  return data;\r\n}\r\nexport async function check({ csrfToken }) {\r\n  const options = { method: \"get\" };\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    CSRF_TOKEN: csrfToken,\r\n  };\r\n  const response = await apiRequest({ url: \"auth/check\", options, headers });\r\n  return response;\r\n}\r\nexport async function logout({ csrfToken }) {\r\n  const options = { method: \"post\" };\r\n  const headers = {\r\n    CSRF_TOKEN: csrfToken,\r\n  };\r\n  const response = await apiRequest({ url: \"auth/logout\", options, headers });\r\n  const data = await response.text();\r\n\r\n  return data;\r\n}\r\n\r\nexport async function register({ email, password, userName }) {\r\n  const options = {\r\n    body: JSON.stringify({ email, password, userName }),\r\n    method: \"post\",\r\n  };\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n\r\n  const response = await apiRequest({ url: \"auth/register\", options, headers });\r\n\r\n  const data = await response.text();\r\n\r\n  return data;\r\n}\r\nexport async function editAccountInfo(password, email, column, value) {\r\n  const options = {\r\n    body: JSON.stringify({ email, password, column, value }),\r\n    method: \"post\",\r\n  };\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n\r\n  const response = await apiRequest({\r\n    url: \"auth/change_acount_info\",\r\n    options,\r\n    headers,\r\n  });\r\n\r\n  const data = await response.text();\r\n\r\n  return data;\r\n}\r\n\r\nexport async function generateEmailVerifyToken() {\r\n  const options = {\r\n    method: \"post\",\r\n  };\r\n\r\n  const response = await apiRequest({\r\n    url: \"auth/generate_verify_url\",\r\n    options,\r\n  });\r\n\r\n  const data = await response.text();\r\n\r\n  return data;\r\n}\r\nexport async function verifyEmail(token) {\r\n  const options = {\r\n    body: JSON.stringify({ token }),\r\n    method: \"post\",\r\n  };\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n\r\n  const response = await apiRequest({\r\n    url: \"auth/verify_email\",\r\n    options,\r\n    headers,\r\n  });\r\n\r\n  const data = await response.text();\r\n\r\n  return data;\r\n}\r\n\r\nexport async function forgotPassword(form) {\r\n  const options = {\r\n    body: form,\r\n    method: \"post\",\r\n  };\r\n\r\n  const response = await apiRequest({\r\n    url: \"auth/generate_reset_url\",\r\n    options,\r\n  });\r\n\r\n  const data = await response.text();\r\n  return data;\r\n}\r\n\r\nexport async function recoverPassword(form) {\r\n  const options = {\r\n    body: form,\r\n    method: \"post\",\r\n  };\r\n\r\n  const response = await apiRequest({\r\n    url: \"auth/recover_password\",\r\n    options,\r\n  });\r\n\r\n  const data = await response.text();\r\n  return data;\r\n}\r\nexport async function changePassword(email, currentPassword, newPassword) {\r\n  const options = {\r\n    body: JSON.stringify({ email, currentPassword, newPassword }),\r\n    method: \"post\",\r\n  };\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n\r\n  const response = await apiRequest({\r\n    url: \"auth/change_password\",\r\n    options,\r\n    headers,\r\n  });\r\n\r\n  const data = await response.text();\r\n\r\n  return data;\r\n}\r\n"],"names":["apiDomain","dealy","timingWindowEarly","timingWindowLate","pointWidth","pointSpacing","startTime","development","production","async","url","options","headers","location","includes","window","hostname","response","fetch","mode","credentials","CSRF_TOKEN","sessionStorage","getItem","ok","message","text","Error","html","container","document","createElement","innerHTML","querySelector","textContent","responseText","status","token","URLSearchParams","search","get","resetForm","changeForm","style","display","console","log","addEventListener","e","preventDefault","formData","FormData","submitButton","disabled","form","body","method","forgotPassword","then","res","setTimeout","pathname","catch","err","finally","set","errorMessage","recoverPassword"],"sourceRoot":""}